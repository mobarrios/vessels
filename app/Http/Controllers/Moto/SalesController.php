<?php

namespace App\Http\Controllers\Moto;

use App\Entities\Moto\Banks;
use App\Entities\Moto\Financials;
use App\Entities\Moto\Items;
use App\Entities\Moto\Sales;
use App\Http\Controllers\Controller;
use App\Http\Repositories\Configs\AdditionalsRepo;
use App\Http\Repositories\Configs\BranchesRepo;
use App\Http\Repositories\Configs\VouchersRepo;
use App\Http\Repositories\Moto\BrandsRepo;
use App\Http\Repositories\Moto\BudgetsRepo;
use App\Http\Repositories\Moto\ClientsRepo;
use App\Http\Repositories\Moto\ColorsRepo;
use App\Http\Repositories\Moto\FinancialsRepo;
use App\Http\Repositories\Moto\PayMethodsRepo;
use App\Http\Repositories\Moto\SalesItemsRepo;
use App\Http\Repositories\Moto\PaymentsRepo;

use App\Http\Repositories\Moto\SalesRepo as Repo;
use App\Http\Repositories\Moto\ItemsRepo;
use App\Http\Repositories\Moto\ModelsRepo;
use App\Http\Repositories\Moto\ProvidersRepo;
use App\Http\Repositories\Moto\PurchasesOrdersRepo;
use Illuminate\Http\Request;
use Illuminate\Routing\Route;
use Illuminate\Support\Facades\Auth;


class SalesController extends Controller
{
    protected $clientsRepo;

    public function __construct(Request $request, Repo $repo, Route $route, PurchasesOrdersRepo $purchasesOrdersRepo,
                                ModelsRepo $modelsRepo, ColorsRepo $colorsRepo, BrandsRepo $brandsRepo, ClientsRepo $clientsRepo,
                                BranchesRepo $branchesRepo, BudgetsRepo $budgetsRepo,ItemsRepo $itemsRepo, SalesItemsRepo $salesItemsRepo,AdditionalsRepo $additionalsRepo)
    {

        $this->request = $request;
        $this->repo = $repo;
        $this->route = $route;

        $this->section = 'sales';
        $this->data['section'] = $this->section;

        $this->data['purchasesOrders'] = $purchasesOrdersRepo->ListsData('id', 'id');

        $this->data['models_types'] = $modelsRepo->ListsData('name', 'id');
        $this->data['models_lists'] = $modelsRepo->ListsData('name', 'id');
        $this->data['colors'] = $colorsRepo->ListsData('name', 'id');
//        $this->data['colors'] = $colorsRepo->ListsData('name', 'id');
        //$this->data['financials'] = $payMethodsRepo->ListsData('name','id');


        $this->data['brands'] = $brandsRepo->getAllWithModels();
        $this->data['branches'] = $branchesRepo->ListsData('name', 'id');
        $this->data['budgets'] = $budgetsRepo->ListsData('id', 'id');

        $this->data['budgets']->prepend("Seleccione presupuesto",0);



        $this->data['additionals'] = $additionalsRepo->ListsData('name','id');

        $this->data['clients'] = $clientsRepo->ListAll()->orderBy('last_name', 'ASC')->get();

        $this->modelsRepo = $modelsRepo;
        $this->clientsRepo = $clientsRepo;
        $this->budgetsRepo = $budgetsRepo;
        $this->itemsRepo = $itemsRepo;
        $this->salesItemsRepo = $salesItemsRepo;

    }

    public function store()
    {
        if($this->request->budgets_id === 0){
            $this->request = $this->request->except('budgets_id');
        }

        return parent::store(); // TODO: Change the autogenerated stub
    }

    public function storeFromBudgets()
    {
        //validar los campos
        $this->validate($this->request,config('models.'.$this->section.'.validationsStore'));

        //crea a traves del repo con el request
        $model = $this->repo->create($this->request);

        //guarda imagenes
        if(config('models.'.$this->section.'.is_imageable'))
            $this->createImage($model, $this->request);

        //guarda log
        if(config('models.'.$this->section.'.is_logueable'))
            $this->repo->createLog($model, 1);

        //si va a una sucursal
        if(config('models.'.$this->section.'.is_brancheable'))
            $this->repo->createBrancheables($model, Auth::user()->branches_active_id);


        if($model->budgets_id){
            $budget = $this->budgetsRepo->find($model->budgets_id);

            foreach($budget->allItems as $modelo){

//                dd([$item->id, $model->branches_confirm_id, $model->id, $item->pivot->colors_id]);
                $item = $this->itemsRepo->asignItem($modelo->id, $model->branches_confirm_id, $model->id, $modelo->pivot->colors_id);
                if ($item != false)
                {

                    // esto duplica en el asignar
                    /*
                    $datos = [];
                    $datos['items_id'] = $item;
                    $datos['sales_id'] = $model->id;
                    $datos['price_actual'] = $modelo->pivot->price_actual;

                    $this->salesItemsRepo->create($datos);
                    */


                    // agrega los adicionales del modelo con los nuevos importes o no
                    if($budget->additionables){
                        foreach ($budget->additionables as $additionals)
                        {
                            $model->additionables()->create(['additionals_id' => $additionals->id , 'amount' => $additionals->amount]);
                        }
                    };

                }else{

                    return redirect()->back()->withErrors('El Articulo no se pudo Asignar!');

                }
            }


        }

        return redirect()->route(config('models.'.$this->section.'.postStoreRoute'),$model->id)->withErrors(['Regitro Agregado Correctamente']);
    }



    //addItems
    public function addItems(ModelsRepo $modelsRepo)
    {
        $this->data['sales'] =  $this->repo->find($this->route->getParameter('sales_id'));

        // $this->data['id'] = $id;
        $this->data['activeBread'] = 'Agregar Item';

        return view('moto.sales.modalItemsForm')->with($this->data);
    }

    // items
    public function createItems(SalesItemsRepo $salesItemsRepo, ItemsRepo $itemsRepo)
    {

        $sale = $this->repo->find($this->request->sales_id);

        // asigna items a la venta
        $item = $itemsRepo->asignItem($this->request->models_id, $sale->branches_confirm_id, $sale->id, $this->request->colors_id);

        if ($item != false)
        {
            $this->request['items_id'] = $item;
            $salesItems = $salesItemsRepo->create($this->request->all());

            // agrega los adicionales del modelo con los nuevos importes o no
            if($this->request->has('additionals'))
            {
                foreach ($this->request->additionals as $id => $amount )
                {
                    $sale->additionables()->create(['additionals_id'=>$id , 'amount' => $amount,'sales_items_id' => $salesItems->id]);
                }
            };

        }
        else
        {
            return redirect()->back()->withErrors('El Articulo no se pudo Asignar!');
        }


        return redirect()->route('moto.sales.edit', $this->request->sales_id)->withErrors('Se agregó correctamente el item');


    }

    public function editItems(SalesItemsRepo $salesItemsRepo)
    {
        $this->data['activeBread'] = 'Agregar Item';

        $this->data['salesItems'] = $salesItemsRepo->find($this->route->getParameter('item'));
        $this->data['sales'] = $this->repo->find($this->route->getParameter('salesId'));


        //$this->data['route'] = ['moto.sales.updateItems', $this->route->getParameter('item'), $this->route->getParameter('id')];

        return view('moto.sales.modalItemsForm')->with($this->data);

    }

    public function updateItems(SalesItemsRepo $salesItemsRepo)
    {
        $salesItemsRepo->update($this->request->sales_items_id , $this->request);

        return redirect()->route('moto.sales.edit',$this->request->sales_id);
    }

    public function deleteItems(SalesItemsRepo $salesItemsRepo)
    {
        $salesItemsRepo->destroy($this->route->getParameter('item'));

        return parent::edit();
    }


    //payemnts
    public function createPayment(PaymentsRepo $PaymentsRepo, PayMethodsRepo $payMethodsRepo)
    {
        $this->data['salesId'] = $this->route->getParameter('item');

        $this->data['salesPayment'] = $PaymentsRepo->getModel()->where('sales_id',$this->route->getParameter('item'))->get();

        $this->data['banks']= Banks::Lists('name','id');
        $this->data['financials']= Financials::Lists('name','id');


        $this->data['checkTypes']= [1=>'Portador', 2=>'Cruzado'];


        $this->data['payments']= $payMethodsRepo->ListsData('name','id');
        $this->data['activeBread']= 'Agregar Pago';


        return view('moto.sales.modalPayMethodsForm')->with($this->data);
    }


    public function addPayment(PaymentsRepo $PaymentsRepo)
    {
        $PaymentsRepo->create($this->request);

        return redirect()->route('moto.sales.edit', $this->request->sales_id)->withErrors('Se agregó el método de pago');
    }

    public function editPayment(PaymentsRepo $PaymentsRepo, PayMethodsRepo $payMethodsRepo)
    {

        $this->data['banks']= Banks::Lists('name','id');
        $this->data['financials']= Financials::Lists('name','id');

        $this->data['checkTypes']= [1=>'Portador', 2=>'Cruzado'];

        $this->data['payments']= $payMethodsRepo->ListsData('name','id');
        $this->data['activeBread']= 'Agregar Pago';

        $this->data['modelPays'] = $PaymentsRepo->find($this->route->getParameter('item'));
       // $this->data['routePays'] = ['moto.sales.addPayment', $this->route->getParameter('item')];

        return view('moto.sales.modalPayMethodsForm')->with($this->data);
    }

    public function updatePayment(PaymentsRepo $PaymentsRepo)
    {

        $PaymentsRepo->update($this->request->sales_payments_id , $this->request);

        return redirect()->back()->withErrors('Se Editó el método de pago');


        //return parent::edit();
    }

    public function deletePayment(PaymentsRepo $PaymentsRepo)
    {
        $PaymentsRepo->destroy($this->route->getParameter('item'));

        return parent::edit();
    }

    public function showAside(Request $request, SalesItemsRepo $salesItemsRepo, PaymentsRepo $PaymentsRepo)
    {
        $this->data['route'] = $request->get('route');

        if ($request->get('edit') != 'false') {
            if ($request->get('type') == 'items') {
                $this->data['model'] = $salesItemsRepo->find($request->get('edit'));
            }

            if ($request->get('type') == 'pays') {
                $this->data['model'] = $PaymentsRepo->find($request->get('edit'));
            }


        }

        $this->data['hidden'] = $request->hidden;
        $this->data['type'] = $request->type;

        return view('moto.sales.aside' . ucfirst($this->data['type']))->with($this->data);

    }



    public function storeRecibos(PaymentsRepo $PaymentsRepo, VouchersRepo $vouchersRepo)
    {
        $sales_payments = collect();


        foreach ($this->request->sales_payments_id as $sales_payments_id){
            $sp = $PaymentsRepo->find($sales_payments_id);
            $sp->status = 1;

            $sp->save();

            $sales_id = $sp->sales_id;

            $sales_payments->push($PaymentsRepo->find($sales_payments_id));
        }


        if($vouchersRepo->ListAll()->where('tipo','R')->count() > 0)
        {
            $number = $vouchersRepo->ListAll()->where('tipo','R')->get()->last()->numero + 1;
        }else
        {
            $number = '1';
        }

        $voucher = $vouchersRepo->create(['tipo' => 'R','letra' => 'X', 'concepto' => 'Pago', 'fecha' => date('Y-m-d', time()), 'importe_total' => $sales_payments->sum('amount'),'numero' => $number]);

        $voucher->Payments()->attach($this->request->sales_payments_id);

        $voucher->Sales()->attach($sales_id);

        return redirect()->route('moto.sales.edit',$sales_id)->withErrors('Se creó correctamente el recibo');
    }

    public function deleteRecibos(VouchersRepo $vouchersRepo, PaymentsRepo $PaymentsRepo)
    {
        $voucher = $vouchersRepo->find($this->route->getParameter('recibo'));

        $voucher->Sales()->detach();

        $vouchersRepo->destroy($this->route->getParameter('recibo'));

        return parent::edit();
    }


    public function show(Sales $sales){
        $sale = $sales->with('Items')->with('Clients')->with('BranchesConfirm')->with('Vouchers')->with('Payments')->find($this->route->getParameter('id'));

        return response()->json($sale);
    }

}
