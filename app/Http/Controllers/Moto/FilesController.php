<?php

namespace App\Http\Controllers\Moto;

use App\Entities\Configs\Vouchers;
use App\Entities\Moto\Forms;
use App\Entities\Moto\Sales;
use App\Http\Controllers\Controller;
use App\Http\Repositories\Configs\VouchersRepo;
use App\Http\Repositories\Moto\BrandsRepo;
use App\Http\Repositories\Moto\CategoriesRepo;
use App\Http\Repositories\Moto\FilesRepo as Repo;
use App\Http\Repositories\Moto\Form12Repo;
use App\Http\Repositories\Moto\Form59Repo;
use App\Http\Repositories\Moto\ProvidersRepo;
use App\Http\Repositories\Moto\SalesRepo;
use Barryvdh\DomPDF\PDF;
use Illuminate\Http\Request;
use Illuminate\Routing\Route;
use Illuminate\Support\Facades\DB;


class FilesController extends Controller
{
    public function  __construct(Request $request, Repo $repo, Route $route,VouchersRepo $vouchersRepo, SalesRepo $salesRepo, Form12Repo $form12Repo, Form59Repo $form59Repo,Forms $forms)
    {

        $this->request  = $request;
        $this->repo     = $repo;
        $this->route    = $route;
        $this->form12Repo    = $form12Repo;
        $this->form59Repo    = $form59Repo;
        $this->forms    = $forms;

        $this->section          = 'files';
        $this->data['section']  = $this->section;

        $this->data['invoices'] = $vouchersRepo->listsDataWhere('numero','id',['tipo' => 'F']);

        $this->data['sales'] = $salesRepo->listsData('id','id');

        $this->data['estado'] = config('models.files.estado');

        $this->data['ubicacion'] = config('models.files.ubicacion');

        $this->data['municipios'] = collect(DB::table('municipios')->get())->lists('name','id');

        $this->data['sa'] = Sales::with('Items')->with('Clients')->with('BranchesConfirm')->with('Vouchers')->with('Payments')->find(1);
    }

    public function store()
    {
        $this->validate($this->request,config('models.'.$this->section.'.validationsStore'));

        //crea a traves del repo con el request
        $model = $this->repo->create($this->request);
//
//        $this->repo->create($model);

        return redirect()->route(config('models.'.$this->section.'.postStoreRoute'),$model->id)->withErrors(['Regitro Agregado Correctamente']);

    }


    public function update()
    {
        //validar los campos
        $this->validate($this->request,config('models.'.$this->section.'.validationsUpdate'));

        $id = $this->route->getParameter('id');

        //edita a traves del repo
        $model = $this->repo->update($id,$this->request);

        return redirect()->route(config('models.'.$this->section.'.postUpdateRoute'),$model->id)->withErrors(['Regitro Editado Correctamente']);
    }

    public function edit()
    {
        $this->data["forms01"] = $this->forms->listadoPrepend(1);

        $this->data["forms12"] = $this->forms->listadoPrepend(2);

        $this->data["forms59"] = $this->forms->listadoPrepend(3);
    

        return parent::edit(); // TODO: Change the autogenerated stub
    }


    public function showForm12(PDF $pdf){
        $models = $this->form12Repo->find($this->route->getParameter('form'));

        $sales = $models->files->sales;

        $pdf->setPaper('a4', 'portland')->loadView('moto.files.formulario.form12',compact('sales','models'));

        return $pdf->stream();
    }

    public function form12(PDF $pdf, Sales $sales){


        $sales = $sales->with('salesItems','clients')->find($this->request->get('sales_id'));

        $this->request['files_id'] = $this->route->getParameter('id');


        $models = $this->form12Repo->create($this->request);

        if($models){
            $form = $this->forms->find($models->forms_id);

            $form->status = 2;

            $form->save();
        }

        $pdf->setPaper('a4', 'portland')->loadView('moto.files.formulario.form12',compact('sales','models'));
//        $pdf->setPaper('a4', 'portland')->loadView('moto.files.formulario.form12',[$sales,$models]);

        return $pdf->download();

    }


    public function showForm59(PDF $pdf){
        $models = $this->form59Repo->find($this->route->getParameter('form'));

        $sales = $models->files->sales;

        $pdf->setPaper('a4', 'portland')->loadView('moto.files.formulario.form59',compact('sales','models'));

        return $pdf->stream();
    }

    public function form59(PDF $pdf, Sales $sales){

        $sales = $sales->with('salesItems','clients')->find($this->request->get('sales_id'));

        $this->request['files_id'] = $this->route->getParameter('id');

        $this->request['razon_social'] = $sales->brancheables->first()->branches->company->razon_social;

        $models = $this->form59Repo->create($this->request);

        if($models){
            $form = $this->forms->find($models->forms_id);

            $form->status = 2;

            $form->save();
        }


        $pdf->setPaper('a4', 'portland')->loadView('moto.files.formulario.form59',compact('sales','models'));


        return $pdf->download();

    }

    public function downloadForm01(){
        $file = $this->repo->find($this->route->getParameter('id'));

        return response()->download($file->form_01_file,$file->ImageForm01);
    }

    public function downloadCuil(){
        $file = $this->repo->find($this->route->getParameter('id'));

        return response()->download($file->proof_of_cuil_file,$file->ImageCuil);
    }

    public function downloadDni(){
        $file = $this->repo->find($this->route->getParameter('id'));

        return response()->download($file->dni_photocopy_file,$file->ImageDni);
    }

/*
    public function form59(PDF $pdf){

        $pdf->setPaper('a4', 'portland')->loadView('moto.files.formulario.form59');

        return $pdf->stream();
    }
*/



    public function remito(VouchersRepo $vouchersRepo)
    {

        $files = explode(',',$this->request->files_id);
        $monto = collect();

        foreach($files as $files_id){
            $legajo = $this->repo->find($files_id);
            $legajo->estado = 1;
            $legajo->ubicacion = 1;

            $monto->push($legajo->sales->total);
            $legajo->save();

        }

        if($vouchersRepo->ListAll()->where('tipo','R')->count() > 0)
        {
            $number = $vouchersRepo->ListAll()->where('tipo','R')->get()->last()->numero + 1;
        }else
        {
            $number = '1';
        }



        $voucher = $vouchersRepo->create(['tipo' => 'R','letra' => 'X', 'concepto' => 'Pago', 'fecha' => date('Y-m-d', time()), 'importe_total' => $monto->sum(),'numero' => $number]);



        if($voucher){
            foreach($files as $files_id) {
                $voucher->Files()->attach($files_id);
            }

            return response()->json($voucher->id,200);

        }else{
            return response()->json('error',403);

        }

    }


    public function getRemito($id,PDF $pdf,Vouchers $vouchers){
        $model = $vouchers->with("Files","Brancheables")->find($id);

        $pdf->setPaper('A4', 'portrait')->loadView('moto.files.remito',compact('model'));

        return $pdf->stream();
    }

}
